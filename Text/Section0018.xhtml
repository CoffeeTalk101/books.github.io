<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Scala中手动实现基础类型</title>
  <meta name="keywords" content="Scala"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>Scala中手动实现基础类型</h1>

<p class="date">2021-01-15</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>Scala不仅是一个函数式语言，也是一个面向对象的语言。实际上Scala在OOP特点方面和Java是保持一致的：万物皆对象，包括基础类型。而Scala在语法上还提供了一个方便的特性，就是可以用纯符号作为函数名（方法名）的关键字，从而使我们可以方便地在Scala去实现自定义的类型，包括各种基础类型本身。</p>

<p>首先来看对布尔类型的实现，这里一个值得注意的地方是取非的符号"!"。其它的逻辑运算符，后面都是跟着一个参数的，比如<span class="code">a.||(b)</span>，在Scala中可以写成<span class="code">a || b</span>，这实际上也是一个语法糖了。那么像取非这样后面没有参数的前缀（prefix）运算符，在定义的时候就必须在前面加上"unary_"作为标注，也就是写成<span class="code">def unary_! : Boolean</span>。还有一个注意点，这里冒号的前面必须要有一个空格，否则编译器会以为冒号也是方法名的一部分。</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">package</span> <span style="color: #00CCFF; font-weight: bold">basetype.simulation</span>

<span style="color: #006699; font-weight: bold">abstract</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">(</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">&amp;&amp;(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(</span>that<span style="color: #555555">,</span> <span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">||(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">,</span> that<span style="color: #555555">)</span>
  <span style="color: #0099FF; font-style: italic">// prefix必须有unary_前缀，且和冒号之间必须有一个空格</span>
  <span style="color: #006699; font-weight: bold">def</span> unary_! <span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">,</span> <span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">==(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(</span>that<span style="color: #555555">,</span> <span style="color: #555555">!</span>that<span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">!=(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(!</span>that<span style="color: #555555">,</span> that<span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">&gt;(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(!</span>that<span style="color: #555555">,</span> <span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> <span style="color: #555555">&lt;(</span>that<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> conditional<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">,</span> that<span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">_true</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">(</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> x
  <span style="color: #006699; font-weight: bold">override</span> <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span> <span style="color: #555555">=</span> <span style="color: #CC3300">&quot;true&quot;</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">(</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Boolean</span> <span style="color: #555555">=</span> y
  <span style="color: #006699; font-weight: bold">override</span> <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span> <span style="color: #555555">=</span> <span style="color: #CC3300">&quot;false&quot;</span>
<span style="color: #555555">}</span>
</pre></div>

<p>来做一些简单的测试：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">package</span> <span style="color: #00CCFF; font-weight: bold">basetype.simulation</span>

<span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">entry</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">App</span><span style="color: #555555">{</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_true</span> <span style="color: #555555">&amp;&amp;</span> <span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_true</span> <span style="color: #555555">||</span> <span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #555555">&amp;&amp;</span> <span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(!</span><span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(!</span><span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #555555">==</span> <span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #555555">!=</span> <span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #555555">&gt;</span> <span style="color: #00AA88; font-weight: bold">_true</span><span style="color: #555555">)</span>
  println<span style="color: #555555">(</span><span style="color: #00AA88; font-weight: bold">_true</span> <span style="color: #555555">&gt;</span> <span style="color: #00AA88; font-weight: bold">_false</span><span style="color: #555555">)</span>
<span style="color: #555555">}</span>
</pre></div>

<p>结果是：</p>

<pre>false
true
false
false
true
true
false
true</pre>

<p>其实实现布尔类型本质上就是做了一个枚举，因为True和False在运算符的两边总共也只有4种排列组合的方式。一个比较巧妙的地方是把conditional()给改成泛型和call by name之后，它实际上可以起到一个模拟if/else的作用：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">abstract</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">[</span><span style="color: #007788; font-weight: bold">T</span><span style="color: #555555">](</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">T</span>
  <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">_true</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">[</span><span style="color: #007788; font-weight: bold">T</span><span style="color: #555555">](</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">T</span> <span style="color: #555555">=</span> x
  <span style="color: #006699; font-weight: bold">override</span> <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span> <span style="color: #555555">=</span> <span style="color: #CC3300">&quot;true&quot;</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">_false</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">Boolean</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">def</span> conditional<span style="color: #555555">[</span><span style="color: #007788; font-weight: bold">T</span><span style="color: #555555">](</span>x<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">,</span> y<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">=&gt;</span> T<span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">T</span> <span style="color: #555555">=</span> y
  <span style="color: #006699; font-weight: bold">override</span> <span style="color: #006699; font-weight: bold">def</span> toString<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span> <span style="color: #555555">=</span> <span style="color: #CC3300">&quot;false&quot;</span>
<span style="color: #555555">}</span>
</pre></div>

<p>用法是 条件.conditional(为true时的执行内容, 为false时的执行内容)，例如：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">object</span> <span style="color: #00AA88; font-weight: bold">entry</span> <span style="color: #006699; font-weight: bold">extends</span> <span style="color: #00AA88; font-weight: bold">App</span><span style="color: #555555">{</span>
  <span style="color: #00AA88; font-weight: bold">_false</span> conditional<span style="color: #555555">(</span>println<span style="color: #555555">(</span><span style="color: #CC3300">&quot;is true&quot;</span><span style="color: #555555">),</span> println<span style="color: #555555">(</span><span style="color: #CC3300">&quot;is false&quot;</span><span style="color: #555555">))</span>
<span style="color: #555555">}</span>
</pre></div>

<p>首先这里为什么需要改成泛型，因为conditional方法本身不关心它接受和返回的值，只是从两者中选择一个去执行。第二，为什么需要改成CBN，因为Scala中函数的调用默认是CBV的，因此默认情况下，在conditional能做出判断前，两个参数里的内容都会被执行。改成CBN就只会执行一个。实际上上面的与和或运算符也应该改成CBN的调用，提高效率。关于CBN和CBV，<a href="Section0015.xhtml">这篇笔记</a>有详细的解释。</p>

<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
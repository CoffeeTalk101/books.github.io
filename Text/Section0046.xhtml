<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Kafka-Flink性能压测方法</title>
  <meta name="keywords" content="Java, BigData"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>Kafka-Flink性能压测方法</h1>

<p class="date">2022-10-24</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<h2 class="sigil_not_in_toc">数据准备</h2>

<p>介绍使用kafka bin目录中自带的 kafka-producer-perf-test.sh 脚本进行压测的方法。类似的方法也可以适用于对其它的Kafka下游系统进行压测。</p>

<p>首先需要准备用于压测的交易数据：</p>

<p>数据应该保存在文本文件中，每行是一条json记录。这里需要注意的是 <span class="code">kafka-producer-perf-test.sh</span> 这个脚本在执行时会将所有数据读进内存，如果用于测试的交易数据量较大（例如1000w条），在读取数据这一步，测试程序就会出现OOM的情况。因此，在生成测试数据时，可以对数据进行分块，之后对不同的分块依次运行测试脚本。</p>

<p>*另一个方法是编辑 <span class="code">kafka-producer-perf-test.sh</span> 这个脚本的内容，它在内部配置了 <span class="code">KAFKA_HEAP_OPTS</span> 这个环境变量。可以修改它的值。</p>

<p>可以使用一个python脚本来生成测试数据，一些实用的写法：</p>

<p>1、生成随机的日期：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">random</span>
<span style="color: #006699; font-weight: bold">from</span> <span style="color: #00CCFF; font-weight: bold">datetime</span> <span style="color: #006699; font-weight: bold">import</span> datetime, timedelta
initial_time <span style="color: #555555">=</span> datetime(year<span style="color: #555555">=</span><span style="color: #FF6600">2022</span>, month<span style="color: #555555">=</span><span style="color: #FF6600">6</span>, day<span style="color: #555555">=</span><span style="color: #FF6600">1</span>)
rand_time <span style="color: #555555">=</span> initial_time <span style="color: #555555">+</span> timedelta(seconds<span style="color: #555555">=</span>random<span style="color: #555555">.</span>randint(<span style="color: #FF6600">1</span>, <span style="color: #FF6600">60</span> <span style="color: #555555">*</span> <span style="color: #FF6600">400000</span>))
time_str <span style="color: #555555">=</span> rand_time<span style="color: #555555">.</span>strftime(<span style="color: #CC3300">"%Y%m%d%H%M%S"</span>)
</pre>
</div>

<p>2、等概率地取值：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">source_id <span style="color: #555555">=</span> random<span style="color: #555555">.</span>choice([<span style="color: #CC3300">"01"</span>,<span style="color: #CC3300">"02"</span>,<span style="color: #CC3300">"03"</span>,<span style="color: #CC3300">"04"</span>])
</pre>
</div>

<p>3、非等概率取值：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">resp_code <span style="color: #555555">=</span> random<span style="color: #555555">.</span>choices([<span style="color: #CC3300">"00"</span>,<span style="color: #CC3300">"01"</span>, <span style="color: #CC3300">"02"</span>], weights<span style="color: #555555">=</span>(<span style="color: #FF6600">90</span>,<span style="color: #FF6600">8</span>,<span style="color: #FF6600">2</span>))
</pre>
</div>

<p>4、生成随机的ASCII字符串：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">string</span>
msg <span style="color: #555555">=</span> <span style="color: #CC3300">""</span><span style="color: #555555">.</span>join([random<span style="color: #555555">.</span>choice(string<span style="color: #555555">.</span>ascii_letters) <span style="color: #006699; font-weight: bold">for</span> x <span style="color: #000000; font-weight: bold">in</span> <span style="color: #336666">range</span>(<span style="color: #FF6600">16</span>)])
</pre>
</div>

<p>类似的，将 <span class="code">string.ascii_letters</span> 替换为 <span class="code">string.octdigits</span> 和 <span class="code">string.hexdigits</span> 可以得到随机的十/十六进制数字字符串。</p>

<p>5、用Memory Map读数据池：例如预先准备了某些测试数据，比如 id 列表，保存在文件中。如果非常大，读取到内存中并不是很方便的情况，可以使用Memory Map实现随机地读取任意行。具体方法可以参考<a href="Section0021.xhtml">《Python对大数据文件的读取》</a>这篇笔记当中相应部分的内容。</p>

<h2 class="sigil_not_in_toc">执行测试</h2>

<p>使用以下命令，替换加粗部分的内容即可：</p>

<pre>nohup /<b>.../kafka_x.x.x</b>/bin/kafka-producer-perf-test.sh --topic <b>xxx_topic</b> --payload-file <b>data.txt</b> --num-records <b>34560000</b> --throughput <b>200</b> --producer-props bootstrap.servers=<b>172.xx.xx.xx:9092,172.xx.xx.xx:9092</b> key.serializer=org.apache.kaf
ka.common.serialization.StringSerializer value.serializer=org.apache.kafka.common.serialization.StringSerializer &amp;</pre>

<h2 class="sigil_not_in_toc">性能监控</h2>

<p>监控整机性能，可以使用 <span class="code">sar</span> 命令，非常方便。如果机器上没有，可以用 <span class="code">yum install sysstat</span> 安装。</p>

<p>命令格式： <span class="code">sar -u -r 间隔（秒） 轮次</span> </p>

<p>例如： <span class="code">nohup sar -u -r 1 172800 &gt; sys_monitor.txt &amp;</span> ，就会每秒1次，记录机器的cpu和内存使用情况，共记录172800次，输出到 sys_monitor.txt 文件当中。</p>

<p>监控单个进程，可以使用我写的这个python脚本（<a href="https://gist.github.com/XDcsy/41ececa4223a14f35c058299a0f1b15b">Gist地址</a>）：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0099FF; font-style: italic"># Monitors CPU and memory usage percentage of a given thread.</span>
<span style="color: #0099FF; font-style: italic"># Output file named under the pattern "{pid}_{ctime}_log.csv"</span>
<span style="color: #0099FF; font-style: italic"># Python3</span>

<span style="color: #0099FF; font-style: italic"># usage:</span>
<span style="color: #0099FF; font-style: italic"># `python ps_monitor.py pid interval limit`</span>
<span style="color: #0099FF; font-style: italic">#     pid: pid of the thread to monitor</span>
<span style="color: #0099FF; font-style: italic">#     interval: time interval between output records, in seconds</span>
<span style="color: #0099FF; font-style: italic">#     limit: stops recording once number of total records reaches the limit</span>
<span style="color: #0099FF; font-style: italic">#</span>
<span style="color: #0099FF; font-style: italic"># example:</span>
<span style="color: #0099FF; font-style: italic"># `python ps_monitor.py 18976 1 20`</span>

<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">time</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">psutil</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">sys</span>

<span style="color: #006699; font-weight: bold">def</span> <span style="color: #CC00FF">pslog</span>(pid, interval, limit):
    filename <span style="color: #555555">=</span> <span style="color: #336666">str</span>(pid) <span style="color: #555555">+</span> <span style="color: #CC3300">'_'</span> <span style="color: #555555">+</span> time<span style="color: #555555">.</span>ctime() <span style="color: #555555">+</span> <span style="color: #CC3300">'_log.csv'</span>
    <span style="color: #006699; font-weight: bold">with</span> <span style="color: #336666">open</span>(filename, <span style="color: #CC3300">'w'</span>) <span style="color: #006699; font-weight: bold">as</span> f:
        f<span style="color: #555555">.</span>write(<span style="color: #CC3300">'time,CPU_percent,memory_percent</span><span style="color: #CC3300; font-weight: bold">\n</span><span style="color: #CC3300">'</span>)
        process <span style="color: #555555">=</span> psutil<span style="color: #555555">.</span>Process(pid)
        counter <span style="color: #555555">=</span> <span style="color: #FF6600">0</span>
        <span style="color: #006699; font-weight: bold">while</span> process<span style="color: #555555">.</span>is_running() <span style="color: #000000; font-weight: bold">and</span> counter <span style="color: #555555">&lt;</span> limit:
            f<span style="color: #555555">.</span>write(time<span style="color: #555555">.</span>ctime() <span style="color: #555555">+</span> <span style="color: #CC3300">','</span> <span style="color: #555555">+</span>
                <span style="color: #336666">str</span>(process<span style="color: #555555">.</span>cpu_percent()) <span style="color: #555555">+</span> <span style="color: #CC3300">','</span> <span style="color: #555555">+</span>
                <span style="color: #336666">str</span>(process<span style="color: #555555">.</span>memory_percent()) <span style="color: #555555">+</span> <span style="color: #CC3300">'</span><span style="color: #CC3300; font-weight: bold">\n</span><span style="color: #CC3300">'</span>
            )
            counter <span style="color: #555555">+=</span> <span style="color: #FF6600">1</span>
            time<span style="color: #555555">.</span>sleep(interval)

pslog(<span style="color: #336666">int</span>(sys<span style="color: #555555">.</span>argv[<span style="color: #FF6600">1</span>]), <span style="color: #336666">int</span>(sys<span style="color: #555555">.</span>argv[<span style="color: #FF6600">2</span>]), <span style="color: #336666">int</span>(sys<span style="color: #555555">.</span>argv[<span style="color: #FF6600">3</span>]))
</pre>
</div>

<p>保存为 <span class="code">ps_monitor.py</span> 文件后，运行： <span class="code">python ps_monitor.py 进程号 间隔（秒） 轮次</span>。例如： <span class="code">python ps_monitor.py 18976 1 20</span> 即可。</p>

<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>使用状态缓存优化Flink的输出性能</title>
  <meta name="keywords" content="BigData"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>使用状态缓存优化Flink的输出性能</h1>

<p class="date">2021-01-18</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>我们在AI项目的在线特征计算中遇到的一个问题是，Flink对于小步长（slide）的时间窗口，优化并不是很好，或者可以说就没有优化。举个例子，对于每个卡号，计算这张卡片在过去5分钟、15分钟、60分钟……的平均交易金额，并且需要较快的刷新速度，也就是说，不能每5分钟才更新一次，因为卡片在这5分钟以内可以做很多笔交易，线上交易尤其如此，对这些交易必须要算出接近实时的特征，才能保证后续的AI模型预测准确。</p>

<p>那么需要利用到的就是Flink的滑动窗口功能。以5分钟为例，可以定义长度为5分钟，步长为5秒的窗口，这样统计数据每5秒钟就会更新一次，代码示意：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">DataStream<span style="color: #555555">&lt;</span>Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;&gt;</span> statistics <span style="color: #555555">=</span> messages<span style="color: #555555">.</span><span style="color: #330099">keyBy</span><span style="color: #555555">(</span><span style="color: #FF6600">0</span><span style="color: #555555">)</span>
    <span style="color: #555555">.</span><span style="color: #330099">timeWindow</span><span style="color: #555555">(</span>Time<span style="color: #555555">.</span><span style="color: #330099">seconds</span><span style="color: #555555">(</span><span style="color: #FF6600">300</span><span style="color: #555555">),</span> Time<span style="color: #555555">.</span><span style="color: #330099">seconds</span><span style="color: #555555">(</span><span style="color: #FF6600">5</span><span style="color: #555555">))</span>
    <span style="color: #555555">.</span><span style="color: #330099">aggregate</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Min5Aggregate<span style="color: #555555">())</span>
    <span style="color: #555555">.</span><span style="color: #330099">setParallelism</span><span style="color: #555555">(</span><span style="color: #FF6600">20</span><span style="color: #555555">);</span>

statistics<span style="color: #555555">.</span><span style="color: #330099">addSink</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> CustomRedisSink<span style="color: #555555">()).</span><span style="color: #330099">setParallelism</span><span style="color: #555555">(</span><span style="color: #FF6600">20</span><span style="color: #555555">);</span>
</pre></div>

<p>但这样带来的一个问题是，对于很多交易并不是很活跃的卡片，有大量的窗口计算是重复的，白白浪费了很多资源。</p>

<p>例如一张卡，每几小时或更长的时间才会有一次交易，但每当一次交易发生，Flink都会产生300/5=60个窗口。而这60个窗口由于在过期前无法接受到新的交易，最终的计算结果实际上是一模一样的。</p>

<p>我们之前使用的策略是，在向redis中写数据之前，比较输出值和redis中的已有值是否相同，如果相同则跳过写入。这样虽然避免了重复写入相同数据，但是依然要做非常多次的比较，也就是读redis。在性能测试中，确认了这个实现确实导致了性能瓶颈。</p>

<p>优化后的解决方案是，对输出流使用RichFlatMapFunction进行过滤，RichFlatMapFunction是可以有状态的，可以将之前的输出结果作为状态缓存起来，当判断输出和缓存的状态相同时，直接从输出流中滤去，使得重复的结果不会到达Redis Sink。</p>

<p>另外，RichFlatMapFunction的状态是支持过期时间的，我们可以通过配置过期时间来保证旧状态不会无限地占用内存。下面是RichFlatMapFunction的一个示例程序，Flink版本1.12：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.functions.MapFunction</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.functions.RichFlatMapFunction</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.state.StateTtlConfig</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.state.ValueState</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.state.ValueStateDescriptor</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.common.time.Time</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.java.io.TextInputFormat</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.api.java.tuple.Tuple2</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.core.fs.Path</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.streaming.api.datastream.DataStream</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.streaming.api.environment.StreamExecutionEnvironment</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.configuration.Configuration</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.streaming.api.functions.source.FileProcessingMode</span><span style="color: #555555">;</span>
<span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">org.apache.flink.util.Collector</span><span style="color: #555555">;</span>

<span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">FlinkStateFilterBeforeOutput</span> <span style="color: #555555">{</span>

    <span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">static</span> <span style="color: #007788; font-weight: bold">void</span> <span style="color: #CC00FF">main</span><span style="color: #555555">(</span>String<span style="color: #555555">[]</span> args<span style="color: #555555">)</span> <span style="color: #006699; font-weight: bold">throws</span> Exception <span style="color: #555555">{</span>

        StreamExecutionEnvironment env <span style="color: #555555">=</span> StreamExecutionEnvironment<span style="color: #555555">.</span><span style="color: #330099">getExecutionEnvironment</span><span style="color: #555555">();</span>
        env<span style="color: #555555">.</span><span style="color: #330099">setParallelism</span><span style="color: #555555">(</span><span style="color: #FF6600">2</span><span style="color: #555555">);</span>

        DataStream<span style="color: #555555">&lt;</span>Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;&gt;</span> dataStream <span style="color: #555555">=</span> env
                <span style="color: #555555">.</span><span style="color: #330099">readFile</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> TextInputFormat<span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Path<span style="color: #555555">()),</span>
                        <span style="color: #CC3300">&quot;D:\\tmp\\flinktestinput.txt&quot;</span><span style="color: #555555">,</span>
                        FileProcessingMode<span style="color: #555555">.</span><span style="color: #330099">PROCESS_CONTINUOUSLY</span><span style="color: #555555">,</span>
                        <span style="color: #FF6600">5000</span><span style="color: #555555">)</span>
                <span style="color: #555555">.</span><span style="color: #330099">map</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Splitter<span style="color: #555555">())</span>
                <span style="color: #555555">.</span><span style="color: #330099">keyBy</span><span style="color: #555555">(</span><span style="color: #FF6600">0</span><span style="color: #555555">)</span>
                <span style="color: #555555">.</span><span style="color: #330099">flatMap</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> RichFlatMapFilter<span style="color: #555555">(</span><span style="color: #FF6600">10</span><span style="color: #555555">));</span>
        dataStream<span style="color: #555555">.</span><span style="color: #330099">print</span><span style="color: #555555">();</span>

        env<span style="color: #555555">.</span><span style="color: #330099">execute</span><span style="color: #555555">(</span><span style="color: #CC3300">&quot;Window WordCount&quot;</span><span style="color: #555555">);</span>
    <span style="color: #555555">}</span>

    <span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">static</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Splitter</span> <span style="color: #006699; font-weight: bold">implements</span> MapFunction<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;&gt;</span> <span style="color: #555555">{</span>
        <span style="color: #9999FF">@Override</span>
        <span style="color: #006699; font-weight: bold">public</span> Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;</span> map<span style="color: #555555">(</span>String s<span style="color: #555555">)</span> <span style="color: #006699; font-weight: bold">throws</span> Exception <span style="color: #555555">{</span>
            String name <span style="color: #555555">=</span> s<span style="color: #555555">.</span><span style="color: #330099">split</span><span style="color: #555555">(</span><span style="color: #CC3300">&quot; &quot;</span><span style="color: #555555">)[</span><span style="color: #FF6600">0</span><span style="color: #555555">];</span>
            String value <span style="color: #555555">=</span> s<span style="color: #555555">.</span><span style="color: #330099">split</span><span style="color: #555555">(</span><span style="color: #CC3300">&quot; &quot;</span><span style="color: #555555">)[</span><span style="color: #FF6600">1</span><span style="color: #555555">];</span>
            <span style="color: #006699; font-weight: bold">return</span> <span style="color: #006699; font-weight: bold">new</span> Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;(</span>name<span style="color: #555555">,</span> value<span style="color: #555555">);</span>
        <span style="color: #555555">}</span>
    <span style="color: #555555">}</span>

    <span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">static</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">RichFlatMapFilter</span> <span style="color: #006699; font-weight: bold">extends</span> RichFlatMapFunction<span style="color: #555555">&lt;</span>Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;,</span> Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;&gt;</span> <span style="color: #555555">{</span>

        <span style="color: #006699; font-weight: bold">private</span> ValueState<span style="color: #555555">&lt;</span>String<span style="color: #555555">&gt;</span> state<span style="color: #555555">;</span>
        <span style="color: #006699; font-weight: bold">private</span> <span style="color: #006699; font-weight: bold">final</span> <span style="color: #007788; font-weight: bold">int</span> ttlSeconds<span style="color: #555555">;</span>

        <span style="color: #006699; font-weight: bold">public</span> <span style="color: #CC00FF">RichFlatMapFilter</span><span style="color: #555555">(</span><span style="color: #007788; font-weight: bold">int</span> seconds<span style="color: #555555">)</span> <span style="color: #555555">{</span>
            ttlSeconds <span style="color: #555555">=</span> seconds<span style="color: #555555">;</span>
        <span style="color: #555555">}</span>

        <span style="color: #9999FF">@Override</span>
        <span style="color: #006699; font-weight: bold">public</span> <span style="color: #007788; font-weight: bold">void</span> <span style="color: #CC00FF">open</span><span style="color: #555555">(</span>Configuration config<span style="color: #555555">)</span> <span style="color: #555555">{</span>
            ValueStateDescriptor<span style="color: #555555">&lt;</span>String<span style="color: #555555">&gt;</span> stateDescriptor <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> ValueStateDescriptor<span style="color: #555555">&lt;</span>String<span style="color: #555555">&gt;(</span><span style="color: #CC3300">&quot;output&quot;</span><span style="color: #555555">,</span> String<span style="color: #555555">.</span><span style="color: #330099">class</span><span style="color: #555555">);</span>
            StateTtlConfig stateTtlConfig <span style="color: #555555">=</span> StateTtlConfig<span style="color: #555555">.</span><span style="color: #330099">newBuilder</span><span style="color: #555555">(</span>Time<span style="color: #555555">.</span><span style="color: #330099">seconds</span><span style="color: #555555">(</span>ttlSeconds<span style="color: #555555">)).</span><span style="color: #330099">build</span><span style="color: #555555">();</span>
            stateDescriptor<span style="color: #555555">.</span><span style="color: #330099">enableTimeToLive</span><span style="color: #555555">(</span>stateTtlConfig<span style="color: #555555">);</span>
            state <span style="color: #555555">=</span> getRuntimeContext<span style="color: #555555">().</span><span style="color: #330099">getState</span><span style="color: #555555">(</span>stateDescriptor<span style="color: #555555">);</span>
        <span style="color: #555555">}</span>

        <span style="color: #9999FF">@Override</span>
        <span style="color: #006699; font-weight: bold">public</span> <span style="color: #007788; font-weight: bold">void</span> <span style="color: #CC00FF">flatMap</span><span style="color: #555555">(</span>Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;</span> input<span style="color: #555555">,</span> Collector<span style="color: #555555">&lt;</span>Tuple2<span style="color: #555555">&lt;</span>String<span style="color: #555555">,</span> String<span style="color: #555555">&gt;&gt;</span> collector<span style="color: #555555">)</span> <span style="color: #006699; font-weight: bold">throws</span> Exception <span style="color: #555555">{</span>
            <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>state<span style="color: #555555">.</span><span style="color: #330099">value</span><span style="color: #555555">()</span> <span style="color: #555555">==</span> <span style="color: #006699; font-weight: bold">null</span><span style="color: #555555">)</span> <span style="color: #555555">{</span>
                state<span style="color: #555555">.</span><span style="color: #330099">update</span><span style="color: #555555">(</span>input<span style="color: #555555">.</span><span style="color: #330099">f1</span><span style="color: #555555">);</span>
                collector<span style="color: #555555">.</span><span style="color: #330099">collect</span><span style="color: #555555">(</span>input<span style="color: #555555">);</span>
            <span style="color: #555555">}</span> <span style="color: #006699; font-weight: bold">else</span> <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(!</span>state<span style="color: #555555">.</span><span style="color: #330099">value</span><span style="color: #555555">().</span><span style="color: #330099">equals</span><span style="color: #555555">(</span>input<span style="color: #555555">.</span><span style="color: #330099">f1</span><span style="color: #555555">))</span> <span style="color: #555555">{</span>
                state<span style="color: #555555">.</span><span style="color: #330099">update</span><span style="color: #555555">(</span>input<span style="color: #555555">.</span><span style="color: #330099">f1</span><span style="color: #555555">);</span>
                collector<span style="color: #555555">.</span><span style="color: #330099">collect</span><span style="color: #555555">(</span>input<span style="color: #555555">);</span>
            <span style="color: #555555">}</span> <span style="color: #006699; font-weight: bold">else</span> <span style="color: #555555">{</span>
                collector<span style="color: #555555">.</span><span style="color: #330099">collect</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Tuple2<span style="color: #555555">&lt;&gt;(</span><span style="color: #CC3300">&quot;Out put of &quot;</span> <span style="color: #555555">+</span> input<span style="color: #555555">.</span><span style="color: #330099">f0</span> <span style="color: #555555">+</span> <span style="color: #CC3300">&quot; &quot;</span> <span style="color: #555555">+</span> input<span style="color: #555555">.</span><span style="color: #330099">f1</span><span style="color: #555555">,</span> <span style="color: #CC3300">&quot;is skiped&quot;</span><span style="color: #555555">));</span>
            <span style="color: #555555">}</span>
        <span style="color: #555555">}</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>
</pre></div>


<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
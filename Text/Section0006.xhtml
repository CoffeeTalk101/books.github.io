<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>递归、尾递归 in Scala</title>
  <meta name="keywords" content="Scala"/>
<link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>递归、尾递归 in Scala</h1>

<p class="date">2020-12-08</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>首先说一个小知识点：在Scala中，递归函数的返回值类型是必须指定的（而其它函数则不必，当然从代码风格的角度，全都写明会更加清楚）。因为编译器会尝试从函数的右侧表达式找这个函数的返回值，但是对递归函数，它会找到这个函数本身，导致返回值无法确定。</p>

<p>尾递归：如果一个函数的递归调用仅仅是调用其本身，那么就是一个尾递归。Scala的编译器会对尾递归进行优化，使其在执行时只占用恒量的内存，因此可以达到和循环一致的执行效率。</p>

<p>类似的，尾调用的定义是，如果一个函数最后的动作仅仅是对（本身或另一个）函数的调用，那么调用栈就不会动态增大。</p>

<p>这里值得一提的是，并非所有语言都对尾递归、尾调用有优化，例如Python（CPython）就不提供原生的尾递归优化。关于具体的理由可以参见 <a href="http://neopythonic.blogspot.com/2009/04/final-words-on-tail-calls.html">Final Words on Tail Calls</a></p>

<p>而在Scala这样的语言中，尾递归的执行效率会比非尾递归更高。一个非尾递归的例子，阶乘：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> factorial<span style="color: #555555">(</span>n<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span>
  <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>n <span style="color: #555555">==</span> <span style="color: #FF6600">0</span><span style="color: #555555">)</span> <span style="color: #FF6600">1</span> <span style="color: #006699; font-weight: bold">else</span> n <span style="color: #555555">*</span> factorial<span style="color: #555555">(</span>n <span style="color: #555555">-</span> <span style="color: #FF6600">1</span><span style="color: #555555">)</span>
</pre>
</div>

<p>改写成尾递归：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> factorial<span style="color: #555555">(</span>n<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">={</span>
  <span style="color: #006699; font-weight: bold">def</span> doFactorial<span style="color: #555555">(</span>n<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">,</span> acc<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span>
    <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>n <span style="color: #555555">==</span> <span style="color: #FF6600">0</span><span style="color: #555555">)</span> acc
    <span style="color: #006699; font-weight: bold">else</span> doFactorial<span style="color: #555555">(</span>n <span style="color: #555555">-</span> <span style="color: #FF6600">1</span><span style="color: #555555">,</span> n <span style="color: #555555">*</span> acc<span style="color: #555555">)</span>
  doFactorial<span style="color: #555555">(</span>n<span style="color: #555555">,</span> <span style="color: #FF6600">1</span><span style="color: #555555">)</span>
<span style="color: #555555">}</span>
</pre>
</div>


<p>思路是用参数来传递计算的中间结果，而不是将表达式保存在调用栈中。这里我们把递归函数外面又包装了一层函数，是为了对参数做内部初始化，不把它暴露在外面。在递归中需要初始化时，这是一种比较好用的写法。</p>

<p>还可以用非递归的循环写法来写，比较一下：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> factorial<span style="color: #555555">(</span>n<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">var</span> acc <span style="color: #006699; font-weight: bold">=</span> <span style="color: #FF6600">1</span>
  <span style="color: #006699; font-weight: bold">var</span> i <span style="color: #006699; font-weight: bold">=</span> <span style="color: #FF6600">1</span>
  <span style="color: #006699; font-weight: bold">while</span> <span style="color: #555555">(</span>i <span style="color: #555555">&lt;=</span> n<span style="color: #555555">)</span> <span style="color: #555555">{</span>
    acc <span style="color: #006699; font-weight: bold">=</span> acc <span style="color: #555555">*</span> i
	i <span style="color: #555555">+=</span> <span style="color: #FF6600">1</span>
  <span style="color: #555555">}</span>
  acc
<span style="color: #555555">}</span>
</pre>
</div>

<p>可以感受到，函数式（递归）的写法，相当于定义了如下的数学函数：</p>

<pre>f(n, acc) = f(n * acc, n - 1) (when n &gt; 0)
          = acc (when n = 0)
</pre>

<p>而程序的执行过程，实际上是对这个函数层层代入进行求值的过程。也就是所谓的代换模型（substitution model）</p>

<p>而上面循环的例子是典型的指令式写法，用变量来存储数据，用流程控制来规定程序的执行逻辑：</p>

<pre>f(n) = ( (((1 * 2) * 3) * 4) * ...*(n-1)) * n
</pre>

<p>从直观的感受来讲，这种写法的抽象程度没有递归写法的高。</p>

<p>不过是不是递归写法就一定要求更高的抽象程度呢，其实也不一定。上面提到，写尾递归的时候，我们用函数的参数代替了变量对中间值的存储。其实这个思路可以用来把循环“暴力”改写成递归：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> factorial<span style="color: #555555">(</span>n<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">={</span>
  <span style="color: #006699; font-weight: bold">def</span> doFactorial<span style="color: #555555">(</span>i<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">,</span> acc<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span>
    <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>i <span style="color: #555555">&gt;</span> n<span style="color: #555555">)</span> acc
    <span style="color: #006699; font-weight: bold">else</span> doFactorial<span style="color: #555555">(</span>i <span style="color: #555555">+</span> <span style="color: #FF6600">1</span><span style="color: #555555">,</span> acc <span style="color: #555555">*</span> i<span style="color: #555555">)</span>
  doFactorial<span style="color: #555555">(</span><span style="color: #FF6600">1</span><span style="color: #555555">,</span> <span style="color: #FF6600">1</span><span style="color: #555555">)</span>
<span style="color: #555555">}</span>
</pre>
</div>

<p>实际上做的操作就是把原来定义的一个循环变量i，变成了一个随着递归不断传递下去的函数参数。和前一个尾递归的写法相比，形式上只是把从后往前算阶乘变成了从前往后算，不过在思路上却有比较大的区别。另外，这也是对递归和循环等价性的一种佐证。</p>

<p><b>*写递归的两种思路*</b></p>

<p>可以总结出写递归是有两种思路的。一种是首先考虑最外层需要做什么，之后使用相同的逻辑，把剩下的部分再当作输入。例如统计一个n长度的字符串中某个字符的个数，那么很明显，最外层只需要判断第一个字符，之后还剩下n-1长度，就再把这剩下的部分当作已经写好的最外层逻辑的输入。</p>

<p>再讲清楚一点，这里所说的“最外层”，就是<b>指递归在得到结果前的最后一次执行，即“临门一脚”。而这之前的执行结果，都可以当作已经处理完成，用调用同一个函数的方式写出</b>。在统计字符个数的例子中，最外层就是前n-1个字符都处理完毕之后，对剩下的最后一个字符的处理。把对前n-1个字符的处理结果，用 <span class="code">count(x.init, target)</span> 表示，那么在“最后一步”，我们要做的就是判断 <span class="code">x.last</span>，并且把结果加上去：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> count<span style="color: #555555">(</span>s<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">String</span><span style="color: #555555">,</span> target<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Char</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>s<span style="color: #555555">.</span>length <span style="color: #555555">==</span> <span style="color: #FF6600">0</span><span style="color: #555555">)</span> <span style="color: #FF6600">0</span>  <span style="color: #0099FF; font-style: italic">// 终止条件</span>
  <span style="color: #006699; font-weight: bold">else</span>
    <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>s<span style="color: #555555">.</span>last<span style="color: #555555">.</span>equals<span style="color: #555555">(</span>target<span style="color: #555555">))</span>  <span style="color: #0099FF; font-style: italic">// 判断字符串的最后一个字符，即s.last</span>
      <span style="color: #FF6600">1</span> <span style="color: #555555">+</span> count<span style="color: #555555">(</span>s<span style="color: #555555">.</span>init<span style="color: #555555">,</span> target<span style="color: #555555">)</span>  <span style="color: #0099FF; font-style: italic">// 加到对剩余字符，即s.init的判断结果当中去</span>
    <span style="color: #006699; font-weight: bold">else</span> count<span style="color: #555555">(</span>s<span style="color: #555555">.</span>init<span style="color: #555555">,</span> target<span style="color: #555555">)</span>
<span style="color: #555555">}</span>
</pre>
</div>


<p><b>这种思路写出来的递归，很有可能是尾递归，是对同一段逻辑的重复利用。</b>这种递归在工程开发中用处是比较大的，比如对字符串、文件之类的处理上面，用到比较多。它的好处是，比起在循环里使用循环变量（循环变量的边界问题常常比较麻烦），而递归里只考虑单次的逻辑+停止条件，思路上常常会更加清晰，写起来也更顺手一些。当然，这类递归要改成循环也是比较方便的。</p>

<p>那么另一种思路，就是函数式的递归。用指令式的思路去看这种递归，第一眼常常会觉得有点神奇。<a href="https://oi-wiki.org/basic/divide-and-conquer/">这篇文章</a>里有一个很形象的说法“写递归的要点：明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节”。这是一种很直觉的理解，也是很正确的。跳进调用栈里去尝试理解这类递归是很难的。</p>

<p>不过比起单纯的“相信它能完成这个任务”，我们可以抓住这类递归的原理，<b>用类似于推导数学公式的方法来写这类递归</b>。其实过程有点像写数列的通项公式，需要我们用代换模型去把需要求解的项目不断向已经定义的逻辑作替换。这样说比较抽象，看一个具体的例子：</p>

<p>问题是给一个整数数组和一个整数，求数组元素相加得到给定整数的组合一共有多少种。用递归的方式来写。</p>

<p>我们把这个递归函数定义为 <span class="code">solve()</span> ，例如对它的一个调用是 <span class="code">solve([1,2,3], 17)</span> 。接下来，要用已经定义的<span class="code">solve()</span>去对这个调用作代换，只要不断代换下去直到停止条件，那么这个调用就能求解了。</p>

<p>如何代换呢，用简单的思路，把所有可能性遍历一遍。首先不用1，只用2,3去组合，那么可以写成 <span class="code">solve([2,3],17)</span> ；下一种情况，用一次1，之后用2,3去组合16，即 <span class="code">solve([2,3],16)</span>；再下一种情况用两次1……那么就可以写出：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">  solve([1,2,3], 17)
= solve([2,3],17) + solve([2,3],16) + ... + solve([2,3],0)
</pre>
</div>

<p>这里我们已经考虑了一个停止条件，也就是 <span class="code">solve()</span> 的第二个参数小于0的时候，停止递归，并且返回0（减到负数，说明组合不能成立）；当它等于0的时候，停止递归，并且返回1（刚好减到0，说明组合成立）。</p>

<p>到这一步我们得到了一个代换后的式子，但是实现这个式子需要一个循环的逻辑，因为项数是不确定的。当然可以直接用循环写，也可以更进一步，只用递归——观察从第二项起的后面每一项，以及我们已经写出的代换逻辑，很容易发现从第二项加到最后一项，其实就等于<span class="code">solve([1,2,3],16)</span>：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">  solve([2,3],16) + ... + solve([2,3],0)
= solve([1,2,3],16)
</pre>
</div>

<p>因此原式就可以进一步写成：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">  solve([1,2,3], 17)
= solve([2,3],17) + solve([1,2,3],16)
</pre>
</div>

<p>OK，到这里我们就成功找到这个问题的“递推公式”了。那么还剩下最后一个问题，就是另一个和数组相关的终止条件。其实从直觉上很容易判断，数组为空的时候 solve() 返回0就可以，也可以选择一个式子，比如 <span class="code">solve([3],17)</span>，来看一下具体的情况：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">  solve([3],17)
= solve([],17) + solve([3],14)
= solve([],17) + solve([],14) + solve([3],11)
= ...
</pre>
</div>

<p>这个式子最终会因为代换到<span class="code">... solve([],2) + solve([3],-1)</span> 而停止，它的最终结果只受最后一项影响，所以前面所有参数为空数组[]的调用，全部返回0即可。</p>

<p>归纳一下上面的分析，把它写成Scala代码：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> solve<span style="color: #555555">(</span>money<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">,</span> coins<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">List</span><span style="color: #555555">[</span><span style="color: #007788; font-weight: bold">Int</span><span style="color: #555555">])</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Int</span> <span style="color: #555555">=</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>money <span style="color: #555555">==</span> <span style="color: #FF6600">0</span><span style="color: #555555">)</span> <span style="color: #FF6600">1</span>
  <span style="color: #006699; font-weight: bold">else</span> <span style="color: #006699; font-weight: bold">if</span> <span style="color: #555555">(</span>coins<span style="color: #555555">.</span>isEmpty <span style="color: #555555">||</span> money <span style="color: #555555">&lt;</span> <span style="color: #FF6600">0</span><span style="color: #555555">)</span> <span style="color: #FF6600">0</span>
  <span style="color: #006699; font-weight: bold">else</span> solve<span style="color: #555555">(</span>money<span style="color: #555555">,</span> coins<span style="color: #555555">.</span>tail<span style="color: #555555">)</span> <span style="color: #555555">+</span> solve<span style="color: #555555">(</span>money <span style="color: #555555">-</span> coins<span style="color: #555555">.</span>head<span style="color: #555555">,</span> coins<span style="color: #555555">)</span>
<span style="color: #555555">}</span>
</pre>
</div>

<p>只需要三行代码就能实现。而在这后面作为支撑的，就是函数式编程的代换模型，和数学思维。</p>
<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
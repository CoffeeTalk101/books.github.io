<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Java中FunctionalInterface的使用</title>
  <meta name="keywords" content="Java"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>Java中FunctionalInterface的使用</h1>

<p class="date">2021-03-25</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>关于FuntionalInterface的介绍很多是单纯从语言特性的角度讲解，其实我觉得结合具体场景和设计思路来理解会更清晰一些。比如说在开发中有一些场景，如果方法能够作为参数传递的话那就会十分的便利，在这种时候函数式接口的使用就显得很自然了。</p>

<p>什么时候会有这个传递方法的需求呢，以一个业务场景来举例子：我们目前设计的系统后台需要对另一个系统进行操作，因为网络或者系统的波动，操作可能会失败，比如发生HTTP ERROR，或者对方系统返回了报错等等，出现这种情况时希望能够自动重试几次，当重试全部失败后才认为操作失败。可能有很多个不同的操作都需要这个重试的功能，同时，程序中的其他一些地方也可能能够抽象出“重试”的逻辑，比如确实需要进行多次的业务，或者是对某个地址做轮询之类。</p>

<p>为了避免重试这个逻辑在不同的方法中重复实现，自然的想法是把它独立出来。一个既简单而又有很强泛用性的抽象逻辑是： <span class="code">retry(method, times)</span>。这里就需要把方法作为参数传递，也就是需要函数式的特性。这里插一句，用纯OOP的方式能不能实现呢，当然也是可以的。但是问题是，1.实现起来不简洁，2.泛用性不强。而Spring的类似的重试功能的实现，以及Java内部的Thread类等等地方，都是用了函数式接口在这种与某类方法关系更密切、而不是很关心具体对象的场景，可以看出这种函数式的方法确实有其优势。</p>

<p>那么问题来了，怎么在Java中传递一个方法？不妨先来看一看如果是一个纯函数式语言，比如Scala的话，这个逻辑要怎么写。</p>

<p>为了例子更加简洁，我们把实际的业务逻辑替换成一个0-1的随机浮点数生成方法，现在希望把它传递给另一个方法，判断生成的随机数大小。如果小于0.9的话就重试，直到得到一个大于0.9的随机数。用Scala可以很简单地写出来：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">def</span> generateRandomDouble<span style="color: #555555">()</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Double</span> <span style="color: #555555">=</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">val</span> r <span style="color: #006699; font-weight: bold">=</span> scala<span style="color: #555555">.</span>util<span style="color: #555555">.</span><span style="color: #00AA88; font-weight: bold">Random</span>
  r<span style="color: #555555">.</span>nextDouble<span style="color: #555555">()</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">def</span> retry<span style="color: #555555">(</span>method<span style="color: #006699; font-weight: bold">:</span> <span style="color: #555555">()</span> <span style="color: #555555">=&gt;</span> <span style="color: #00AA88; font-weight: bold">Double</span><span style="color: #555555">)</span><span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Double</span> <span style="color: #555555">=</span> <span style="color: #555555">{</span>
  <span style="color: #006699; font-weight: bold">val</span> number<span style="color: #006699; font-weight: bold">:</span> <span style="color: #007788; font-weight: bold">Double</span> <span style="color: #555555">=</span> method<span style="color: #555555">()</span>
  <span style="color: #006699; font-weight: bold">if</span><span style="color: #555555">(</span>number <span style="color: #555555">&lt;</span> <span style="color: #FF6600">0.9</span><span style="color: #555555">)</span> retry<span style="color: #555555">(</span>method<span style="color: #555555">)</span>
  <span style="color: #006699; font-weight: bold">else</span> number
<span style="color: #555555">}</span>

retry<span style="color: #555555">(</span>generateRandomDouble<span style="color: #555555">)</span>
</pre>
</div>

<p>这里 <span class="code">generateRandomDouble()</span> 就是需要进行重试的方法，而重试的逻辑则在 <span class="code">retry()</span> 方法中。因此将方法传递给 <span class="code">retry()</span> 就可以完成重试。这里有两个值得注意的地方，一是传递进来的方法，它的类型的表示方式为 <span class="code">() =&gt; Double</span> ，因为在Scala中函数是一等公民，所以函数和变量一样，都有对应的类型表示方式，左边的空括号表示这个函数不接受参数，右边的Double表示它的返回类型。第二个值得注意的点是在函数体中对传递进来的函数的调用方式，非常简单，就是 <span class="code">method()</span> ，这是因为函数可以单独定义，所以可以直接这样调用。</p>

<p>那么同样的逻辑，在Java中要怎样写呢。这里我们就遇到了两个和上面相对应的问题，一是在Java中，方法不是基本类型，作为参数传递的话没有办法表示方法的类型；二是Java中方法必须依附于类或者对象，无法直接通过“方法名()”去调用。</p>

<p>正是为了解决这样的问题，在Java8中引入了函数式接口的概念。在看函数式接口之前，我们先把程序的其它部分用Java写好：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">java.util.Random</span><span style="color: #555555">;</span>

<span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Generator</span> <span style="color: #555555">{</span>
    <span style="color: #007788; font-weight: bold">double</span> <span style="color: #CC00FF">generateRandomDouble</span><span style="color: #555555">()</span> <span style="color: #555555">{</span>
        Random rand <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Random<span style="color: #555555">();</span>
        <span style="color: #006699; font-weight: bold">return</span> rand<span style="color: #555555">.</span><span style="color: #330099">nextDouble</span><span style="color: #555555">();</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Retry</span> <span style="color: #555555">{</span>
    <span style="color: #007788; font-weight: bold">double</span> <span style="color: #CC00FF">attempt</span><span style="color: #555555">(</span>method<span style="color: #555555">){</span>
        <span style="color: #007788; font-weight: bold">double</span> number <span style="color: #555555">=</span> method<span style="color: #555555">();</span>
        <span style="color: #006699; font-weight: bold">while</span> <span style="color: #555555">(</span>number <span style="color: #555555">&lt;</span> <span style="color: #FF6600">0.9</span><span style="color: #555555">){</span>
            number <span style="color: #555555">=</span> method<span style="color: #555555">();</span>
        <span style="color: #555555">}</span>
        <span style="color: #006699; font-weight: bold">return</span> number<span style="color: #555555">;</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Example</span><span style="color: #555555">{</span>
    <span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">static</span> <span style="color: #007788; font-weight: bold">void</span> <span style="color: #CC00FF">main</span><span style="color: #555555">(</span>String<span style="color: #555555">[]</span> args<span style="color: #555555">)</span> <span style="color: #555555">{</span>
        Generator g <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Generator<span style="color: #555555">();</span>
        Retry retry <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Retry<span style="color: #555555">();</span>
        System<span style="color: #555555">.</span><span style="color: #330099">out</span><span style="color: #555555">.</span><span style="color: #330099">println</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Retry<span style="color: #555555">.</span><span style="color: #330099">attempt</span><span style="color: #555555">(???));</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>
</pre>
</div>

<p>类似的，我们定义了一个生成随机数的类，和一个进行重试的类Retry，但是有两个地方会报错，一是Retry类中attempt()方法的定义，另一个是main()中对attemp()方法的调用。</p>

<p>首先解决调用时如何将方法作为参数传递的问题，我们知道Java8提供了lambda表达式，因此可以把对方法的调用写成 <span class="code">() -&gt; g.generateRandomDouble()</span> 的形式。它表示这个lambda表达式不接受参数，直接返回随机数生成的结果。特别的，对这种不需要接受参数的lambda，Java提供了一个语法糖，我们可以把它写成 <span class="code">g::generateRandomDouble</span>。</p>

<p>可以传递lambda表达式了，下面需要解决的问题就是接受的部分要如何去处理。这里就要用到FunctionalInterface：既然方法的传递必须要依附于对象，那就创建一个临时的对象，让它作为方法的载体。FunctionalInterface就是给这个对象实现的接口。而调用FunctionalInterface中定义的抽象方法，就等于调用了传递进来的方法。因此完整的程序可以写成这样：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #006699; font-weight: bold">import</span> <span style="color: #00CCFF; font-weight: bold">java.util.Random</span><span style="color: #555555">;</span>

<span style="color: #9999FF">@FunctionalInterface</span>
<span style="color: #006699; font-weight: bold">interface</span> <span style="color: #00AA88; font-weight: bold">Retryable</span><span style="color: #555555">{</span>
    <span style="color: #006699; font-weight: bold">abstract</span> <span style="color: #007788; font-weight: bold">double</span> <span style="color: #CC00FF">dummyMethod</span><span style="color: #555555">();</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Generator</span> <span style="color: #555555">{</span>
    <span style="color: #007788; font-weight: bold">double</span> <span style="color: #CC00FF">generateRandomDouble</span><span style="color: #555555">()</span> <span style="color: #555555">{</span>
        Random rand <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Random<span style="color: #555555">();</span>
        <span style="color: #006699; font-weight: bold">return</span> rand<span style="color: #555555">.</span><span style="color: #330099">nextDouble</span><span style="color: #555555">();</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Retry</span> <span style="color: #555555">{</span>
    <span style="color: #007788; font-weight: bold">double</span> <span style="color: #CC00FF">attempt</span><span style="color: #555555">(</span>Retryable dummyObj<span style="color: #555555">){</span>
        <span style="color: #007788; font-weight: bold">double</span> number <span style="color: #555555">=</span> dummyObj<span style="color: #555555">.</span><span style="color: #330099">dummyMethod</span><span style="color: #555555">();</span>
        <span style="color: #006699; font-weight: bold">while</span> <span style="color: #555555">(</span>number <span style="color: #555555">&lt;</span> <span style="color: #FF6600">0.9</span><span style="color: #555555">){</span>
            number <span style="color: #555555">=</span> dummyObj<span style="color: #555555">.</span><span style="color: #330099">dummyMethod</span><span style="color: #555555">();</span>
        <span style="color: #555555">}</span>
        <span style="color: #006699; font-weight: bold">return</span> number<span style="color: #555555">;</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>

<span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">class</span> <span style="color: #00AA88; font-weight: bold">Example</span><span style="color: #555555">{</span>
    <span style="color: #006699; font-weight: bold">public</span> <span style="color: #006699; font-weight: bold">static</span> <span style="color: #007788; font-weight: bold">void</span> <span style="color: #CC00FF">main</span><span style="color: #555555">(</span>String<span style="color: #555555">[]</span> args<span style="color: #555555">)</span> <span style="color: #555555">{</span>
        Generator g <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Generator<span style="color: #555555">();</span>
        Retry retry <span style="color: #555555">=</span> <span style="color: #006699; font-weight: bold">new</span> Retry<span style="color: #555555">();</span>
        System<span style="color: #555555">.</span><span style="color: #330099">out</span><span style="color: #555555">.</span><span style="color: #330099">println</span><span style="color: #555555">(</span><span style="color: #006699; font-weight: bold">new</span> Retry<span style="color: #555555">().</span><span style="color: #330099">attempt</span><span style="color: #555555">(</span><span style="color: #9999FF">g:</span><span style="color: #555555">:</span>generateRandomDouble<span style="color: #555555">));</span>
    <span style="color: #555555">}</span>
<span style="color: #555555">}</span>
</pre>
</div>

<p>因为实现FunctionalInterface的实际上是一个为了传递方法而临时创建的对象，所以我将这个对象和方法起名为 <span class="code">dummyObj.dummyMethod()</span>。</p>

<p>最后思考一点，因为需要创建一个临时对象去作方法的调用，Java是如何保证传递进去的方法和临时对象的方法的对应关系的？在我们的代码里面，并没有对这两者的方法名作任何的关联。如果FunctionalInterface里面定义了两个以上的抽象方法，比如<span class="code">dummyMethod1</span>和<span class="code">dummyMethod2</span>，Java是如何知道调用哪个方法才表示要调用<span class="code">g.generateRandomDouble()</span>呢？</p>

<p>实际上Java并没有用什么巧妙的方法，而是直接规定了FunctionalInterface里面必须有且仅有一个抽象方法。所以方法的对应并不是靠方法名字，而靠规定抽象方法的唯一性来保证的。</p>

<p>当然，这个方法最好还是有一个符合语义的名字。尽管我们这里完全没有使用 <span class="code">implements</span> 关键字去实现这个函数式接口（而是在接受参数时隐式地实现了它）但是直接用 <span class="code">implements</span> 去实现它当然也是可以的。以Java自带的Thread类为例，<span class="code">Runnable</span>就是一个函数式接口，我们可以直接用 <span class="code">Thread(someClass::someMethod)</span> 的方式传递一个方法给它，也可以选择构造一个类，实现<span class="code">Runnable</span>接口并且重写里面抽象的<span class="code">Run()</span>方法，之后传递一个实例化的对象给它。</p>

<p>可见虽然有一些曲折和别扭，不过Java通过函数式接口还是实现了函数式和OOP的统一，为我们编程提供了方便。</p>

<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>正则常用规则的备注</title>
  <meta name="keywords" content="Algorithm"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>正则常用规则的备注</h1>

<p class="date">2020-12-29</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>这篇文章主要是对正则的常用规则中一些容易模糊不清的地方进行备注，例如\w的精确判断方式，在[ ]中^和-符号的含义与其位置的关系等。</p>

<p>这篇文章并没有包含所有的正则规则，目的也并非对涉及的规则作详细的解释，因此建议和正则文档或教程结合阅读，作为补充。另外，后面的一篇文章<a href="Section0016.xhtml">《正则的执行方式》</a>对于理解复杂的正则也会有所帮助。</p>

<p>文中用到的主要参考来自<a href="https://www.regular-expressions.info/tutorial.html">regular-expressions.info</a>、<a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference?redirectedfrom=MSDN">微软的正则表达式参考文档</a>。</p>

<h2 class="sigil_not_in_toc">字符类</h2>

<table>
<thead>
  <tr>
    <th rowspan="2">Use</th>
    <th rowspan="2">To match any character</th>
    <th rowspan="2">Remarks</th>
  </tr>
  <tr>
  </tr>
</thead>
<tbody>
  <tr>
    <td rowspan="2">[set]</td>
    <td rowspan="2">In that set</td>
    <td rowspan="2">[ ]内被正则占用的语言元素 如* ?等可以不需要转义直接写   </td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td rowspan="2">[^set]</td>
    <td rowspan="2">Not in that set</td>
    <td rowspan="2">^写在[ ]的开头时表示匹配整个集合的反向结果。写在[ ]的中间时则表示匹配^这个字符本身。</td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td rowspan="2">[a–z]</td>
    <td rowspan="2">In the a-z range</td>
    <td rowspan="2">- 写在[ ]的开头或结尾时表示匹配 - 字符本身。尽管一些语言可以通过 - 两端的符号推测它的含义，但是不建议在需要匹配 - 本身时把它直接写在中间。如果要写在中间，应该加上\进行转义。</td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td rowspan="2">[^a–z]</td>
    <td rowspan="2">Not in the a-z range</td>
    <td rowspan="2"></td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td rowspan="2">.</td>
    <td rowspan="2">Any except \n (new line)</td>
    <td rowspan="2"></td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td rowspan="2">\char</td>
    <td rowspan="2">Escaped special character</td>
    <td rowspan="2">被正则占用的语言元素包括 . ^ $ * + ? { } [ ] ( ) \ |    此外还可以使用Unicode编码来表示字符，如 \u000A</td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td>\w</td>
    <td>Word character</td>
    <td>大多数语言中等价于[A-Za-z0-9_]，即匹配数字、字母和下划线</td>
  </tr>
  <tr>
    <td>\W</td>
    <td>Non-word character</td>
    <td>在正则中 \大写字母 一般是 \小写字母 的反向结果，即\W等价于[^\w]</td>
  </tr>
  <tr>
    <td>\d</td>
    <td>Decimal digit</td>
    <td>等价于[0-9]</td>
  </tr>
  <tr>
    <td>\D</td>
    <td>Not a decimal digit</td>
    <td>等价于[^\d]</td>
  </tr>
  <tr>
    <td>\s</td>
    <td>White-space character</td>
    <td>大多数语言中等价于[ \t\r\n\f]，即匹配空格、制表符、换行符和分页符</td>
  </tr>
  <tr>
    <td>\S</td>
    <td>Non-white-space char</td>
    <td>等价于[^\s]</td>
  </tr>
</tbody>
</table>

<p>注：在[ ]内使用否定表达时需要格外注意，例如[\D\S]和[^\d\s]并不等价：[\D\S]匹配(不是数字)或者(不是空白字符)的任意字符，因为一个字符不可能同时为数字和空白字符，所以[\D\S]实际上会匹配所有字符。而[^\d\s]匹配不是(数字或者空白字符)的任意字符，所以它会匹配到字母和各种特殊符号。</p>

<h2 class="sigil_not_in_toc">定位点</h2>

<table>
<thead>
  <tr>
    <th>Use</th>
    <th>To specify position</th>
    <th>Remarks</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>^</td>
    <td>At start of string or line</td>
    <td>匹配字符串的起始位置；在多行模式下匹配行的起始位置</td>
  </tr>
  <tr>
    <td>\A</td>
    <td>At start of string</td>
    <td>始终匹配字符串的起始位置（不受多行模式影响）</td>
  </tr>
  <tr>
    <td>\z</td>
    <td>At end of string</td>
    <td>始终匹配字符串的结束位置（不受多行模式影响）；如果字符串结尾是\n，可以匹配这个\n</td>
  </tr>
  <tr>
    <td>\Z</td>
    <td>At end (or before \n at end) of string</td>
    <td>始终匹配字符串的结束位置（不受多行模式影响）；如果字符串结尾是\n，不匹配最后的一个\n</td>
  </tr>
  <tr>
    <td>$</td>
    <td>At end (or before \n at end) of string or line</td>
    <td>匹配字符串的结束位置；在多行模式下匹配行的结束位置；如果字符串或行的结尾是\n，不匹配最后的一个\n</td>
  </tr>
  <tr>
    <td>\G</td>
    <td>Where previous match ended</td>
    <td>匹配前一个匹配的结束位置，例如\G\(\d\)可匹配到"(1)(3)[7](9)" 中的 "(1)"和"(3)" </td>
  </tr>
  <tr>
    <td>\b</td>
    <td>On word boundary</td>
    <td>匹配以下三种位置：（1）字符串的起始位置，且对应的起始字符是\w；（2）字符串的结束位置，且对应的结束字符字符是\w；（3）字符串的中间位置，且这个位置的左边和右边至少有一个字符不是\w</td>
  </tr>
  <tr>
    <td>\B</td>
    <td>Not on word boundary</td>
    <td>匹配所有不是\b的位置</td>
  </tr>
</tbody>
</table>

<p>注：表格中是对\b的精确定义，关于它的判断流程，在后面一篇文章<a href="Section0016.xhtml">《正则的执行方式》</a>中有一个详细的例子（含定位点的正则）做了介绍。实际使用中一般把\b理解成单词的分界位置即可。</p>

<h2 class="sigil_not_in_toc">数量词</h2>

<table>
<thead>
  <tr>
    <th>Greedy</th>
    <th>Lazy</th>
    <th>Matches</th>
    <th>Remarks</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>*</td>
    <td>*?</td>
    <td>0 or more times</td>
    <td></td>
  </tr>
  <tr>
    <td>+</td>
    <td>+?</td>
    <td>1 or more times</td>
    <td></td>
  </tr>
  <tr>
    <td>?</td>
    <td>??</td>
    <td>0 or 1 time</td>
    <td></td>
  </tr>
  <tr>
    <td>{n}</td>
    <td>{n}?</td>
    <td>Exactly n times</td>
    <td>{n}的贪婪和懒惰写法效果是一样的</td>
  </tr>
  <tr>
    <td>{n,}</td>
    <td>{n,}?</td>
    <td>At least n times</td>
    <td></td>
  </tr>
  <tr>
    <td>{n,m}</td>
    <td>{n,m}?</td>
    <td>From n to m times</td>
    <td></td>
  </tr>
</tbody>
</table>

<p>注：数量词修饰它前面的一个正则规则。一个正则规则是指：一个字符（字面规则）、一个分组构造或一个字符类。</p>

<h2 class="sigil_not_in_toc">分组构造</h2>

<table>
<thead>
  <tr>
    <th>Use</th>
    <th>To define</th>
    <th>Remarks</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>(exp)</td>
    <td>Indexed group</td>
    <td>组号的分配规则：整个正则构成编号为0的组，之后从1开始到n的编号分配给n个未命名组，命名组的编号从n+1开始。同级的组编号从左向右递增，以左括号的位置为准</td>
  </tr>
  <tr>
    <td>(?&lt;name&gt;exp)</td>
    <td>Named group</td>
    <td></td>
  </tr>
  <tr>
    <td>(?:exp)</td>
    <td>Noncapturing group</td>
    <td>非捕获组不影响正则的匹配，只是不会被分配编号</td>
  </tr>
  <tr>
    <td>(?=exp)</td>
    <td>Zero-width positive lookahead</td>
    <td>零宽度断言都是非捕获的，不会被分配编号</td>
  </tr>
  <tr>
    <td>(?!exp)</td>
    <td>Zero-width negative lookahead</td>
    <td></td>
  </tr>
  <tr>
    <td>(?&lt;=exp)</td>
    <td>Zero-width positive lookbehind</td>
    <td>回顾后发断言的符号比先行预测断言的符号多一个&lt;</td>
  </tr>
  <tr>
    <td>(?&lt;!exp)</td>
    <td>Zero-width negative lookbehind</td>
    <td></td>
  </tr>
  <tr>
    <td>(?&gt;exp)</td>
    <td>Non-backtracking (greedy)</td>
    <td>原子组是非捕获的，不会被分配编号</td>
  </tr>
</tbody>
</table>

<h2 class="sigil_not_in_toc">反向引用构造</h2>

<table>
<thead>
  <tr>
    <th>Use</th>
    <th>To match</th>
    <th>Remarks</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>\n</td>
    <td>Indexed group</td>
    <td>例如 (\w)\1 匹配 "seek" 中的 "ee"</td>
  </tr>
  <tr>
    <td>\k&lt;name&gt;</td>
    <td>Named group</td>
    <td>例如 (?&lt;char&gt;\w)\k&lt;char&gt; 匹配 "seek" 中的 "ee"</td>
  </tr>
</tbody>
</table>

<h2 class="sigil_not_in_toc">替换构造</h2>

<table>
<thead>
  <tr>
    <th>Use</th>
    <th>To match</th>
    <th>Remarks</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>a|b</td>
    <td>Either a or b</td>
    <td>| 在所有符号中的优先级是最低的，所以一般会把可选项放到分组构造( )里面</td>
  </tr>
  <tr>
    <td>(?(exp) yes | no)</td>
    <td>yes if exp is matched no if exp isn't matched</td>
    <td>如果由 expression 指定的正则表达式匹配，则匹配 yes ；否则，匹配 no</td>
  </tr>
  <tr>
    <td>(?(name) yes | no)</td>
    <td>yes if name is matched no if name isn't matched</td>
    <td>如果 name (已命名或已编号的捕获组）匹配，则匹配 yes；否则，匹配 no。</td>
  </tr>
</tbody>
</table>


<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Maven打包时Plugin的选择和其它一些知识点</title>
  <meta name="keywords" content="Java"/>
  <link href="../Styles/Style0001.css" type="text/css" rel="stylesheet"/>
</head>

<body>
<h1>Maven打包时Plugin的选择和其它一些知识点</h1>

<p class="date">2021-06-17</p>

<a class="home" href="https://xdcsy.github.io/">&lt; view all posts</a>

<p>最近看到不同的项目里在Maven打包时用到了不同的插件，比如Assembly Plugin和Shade Plugin，它们似乎都能起到打包uber jar的作用。还有，使用 project.build.resources 标签和使用Resources Plugin都能够指定资源文件的位置。那么它们之间有什么不同之处呢，这篇笔记进行一些总结。</p>

<h2 class="sigil_not_in_toc">打包依赖</h2>

<p>Assembly和Shade这两个插件在我们需要把项目的依赖一起打包到一个uber jar时使用，网上对于它们俩的区别说的大多不是很明确，这里先说结论：<b>打包含依赖的jar时最好用Shade Plugin，不要用Assembly Plugin。</b></p>

<p>我们看一下<a href="http://maven.apache.org/plugins/maven-assembly-plugin/">Assembly Plugin的官方文档</a>，里面很明确地提到了一句话：“If your project wants to package your artifact in an uber-jar, the assembly plugin provides only basic support. For more control, use the Maven Shade Plugin.”，也就是说Assembly Plugin在打包依赖方面只能提供基本的功能，官方也推荐我们需要打包uber jar时使用Shade Plugin。</p>

<p>具体的问题在哪里呢？首先，在提供依赖的多个jar包中可能存在具有相同路径、相同文件名的文件，而如果我们使用Assembly Plugin，<a href="https://www.programmersought.com/article/98985750449/">这些文件会彼此覆盖</a>，最终只会保留一个文件，就可能导致bug。</p>

<p>另外，除了文件可能存在冲突，如果我们进一步把打包的uber jar用作其它项目的依赖，那么一些库可能既存在于uber jar里，同时也被这个项目本身作为依赖引入了，这时这个项目的class path里面就会存在多个同名的类，也<a href="https://stackoverflow.com/questions/38548271/difference-between-maven-plugins-assembly-plugins-jar-plugins-shaded-plugi">可能导致问题</a>。</p>

<p>Shade Plugin提供了能够解决上述两个问题的方法。不过要注意的是它也不是自动解决的，而是需要我们去配置的。解决文件冲突彼此覆盖的问题，可以使用<a href="http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html">Resource Transformers</a>功能，例如对冲突的文件进行合并，或者重定向等。而要解决class pass可能存在多个同名类的问题，可以使用<a href="http://maven.apache.org/plugins/maven-shade-plugin/examples/class-relocation.html">Relocating Classes</a>功能，使uber jar中的一些类不会向外部暴露。</p>

<p>举一个典型的例子，Spring的各个jar包中有很多路径（META-INF）和名称（如spring.schemas等）相同的文件，但是它们的内容实际上是不一样的。Assembly和Shade插件在默认情况下只会保留其中的一个文件，会导致打包得到的uber jar在运行时报错，例如：Unable to locate Spring NamespaceHandler... 等等。对这种问题，就可以使用Shade Plugin的Transformers解决——规定相同文件彼此之间不进行覆盖，而是以追加的方式进行合并：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #330099; font-weight: bold">&lt;transformers&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;transformer</span> <span style="color: #330099">implementation=</span><span style="color: #CC3300">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span><span style="color: #330099; font-weight: bold">&gt;</span>
        <span style="color: #330099; font-weight: bold">&lt;resource&gt;</span>META-INF/spring.handlers<span style="color: #330099; font-weight: bold">&lt;/resource&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;/transformer&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;transformer</span> <span style="color: #330099">implementation=</span><span style="color: #CC3300">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span><span style="color: #330099; font-weight: bold">&gt;</span>
        <span style="color: #330099; font-weight: bold">&lt;resource&gt;</span>META-INF/spring.schemas<span style="color: #330099; font-weight: bold">&lt;/resource&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;/transformer&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;transformer</span> <span style="color: #330099">implementation=</span><span style="color: #CC3300">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span><span style="color: #330099; font-weight: bold">&gt;</span>
        <span style="color: #330099; font-weight: bold">&lt;resource&gt;</span>META-INF/spring.factories<span style="color: #330099; font-weight: bold">&lt;/resource&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;/transformer&gt;</span>
<span style="color: #330099; font-weight: bold">&lt;/transformers&gt;</span>
</pre></div>


<p>那么话说回来，Assembly Plugin既然并不适合打包uber jar，它的功能是什么呢。其实它主要是为了提供各种对<b>项目本体</b>的灵活打包方式，例如将项目的源码、二进制等打包成tar.gz, tar.bz2, zip等格式，可以通过<a href="http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html">Descriptor</a>对打包的方式进行丰富的自定义配置。</p>

<p>另外，既然提到了打包依赖，也应该说一说Dependency Plugin的 <a href="https://maven.apache.org/plugins/maven-dependency-plugin/examples/copying-project-dependencies.html">copy-dependencies</a> goal。它的功能并非是将依赖打包到一个jar中，而是将项目用到的依赖都复制到一个指定的目录，类似于“导出”。因为它不做复制以外的任何处理，最为松散，因此实际上提供了最大的自由度。例如，<a href="https://product.hubspot.com/blog/the-fault-in-our-jars-why-we-stopped-building-fat-jars">可以导出依赖后手动将build目录打成一个tar包，之后再上传部署</a>。</p>

<h2 class="sigil_not_in_toc">打包资源文件</h2>

<p>打包资源文件有两种常见的写法，一种是使用 project.build.resources 标签，另一种是使用maven-resources-plugin。实际上，<b><a href="https://stackoverflow.com/questions/11896742/what-is-the-difference-between-maven-resources-plugin-and-the-project-build-reso">resources 标签就是由Resource Plugin进行处理的</a></b>，因此指定build.resource实际上就是在使用Resource Plugin的copy-resources goal。</p>

<p>当我们想把资源文件打包在jar包的外部时，可以这样写：</p>

<!-- HTML generated using hilite.me --><div style="background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">    <span style="color: #330099; font-weight: bold">&lt;build&gt;</span>
        <span style="color: #330099; font-weight: bold">&lt;resources&gt;</span>
            <span style="color: #330099; font-weight: bold">&lt;resource&gt;</span>
                <span style="color: #330099; font-weight: bold">&lt;directory&gt;</span>${project.basedir}/config<span style="color: #330099; font-weight: bold">&lt;/directory&gt;</span>
                <span style="color: #330099; font-weight: bold">&lt;targetPath&gt;</span>${project.build.directory}<span style="color: #330099; font-weight: bold">&lt;/targetPath&gt;</span>
            <span style="color: #330099; font-weight: bold">&lt;/resource&gt;</span>
        <span style="color: #330099; font-weight: bold">&lt;/resources&gt;</span>
    <span style="color: #330099; font-weight: bold">&lt;/build&gt;</span>
</pre>
</div>

<p>这里的${...}的值是从哪里来的呢，可以参考这篇<a href="http://maven.apache.org/ref/current/maven-model-builder/#Model_Interpolation">官方文档</a>。例如可以从里面里面看到，<span class="code">${project.basedir}</span>实际上是pom文件所在的路径（所以不要随便移动pom文件的位置哦）。</p>

<p>另一个查看这些属性的实际值的方法是使用 <span class="code">mvn help:effective-pom</span> 命令查看。因为maven是COC的（convention over configuration），实际上它自带了一些默认的配置（叫super pom），而effective pom就是一个合并了默认pom、其它父级pom和当前module内pom的pom文件，也就是说，它才是在当前项目或当前module中实际产生作用的完整pom。在effective pom里，我们可以查看各种${...}被解释成的实际路径。</p>

<h2 class="sigil_not_in_toc">关于pluginManagement标签</h2>

<p>最后补充一个知识点，之前有同事把插件的配置写在了build.pluginManagement.plugins标签下，导致插件实际上没有起作用。正确的位置应该是把插件放在build.plugins标签下，不需要pluginManagement标签。</p>

<p>那么pluginManagement标签是做什么的呢，其实就像它的名字，它只起到manage的作用：具体来说，如果项目使用了pluginManagement当中的插件，则由pluginManagement来指定插件的version, configuration, executions等。而如果没有使用，里面的插件并不会加入build。</p>

<p>那么进一步，pluginManagement所管理（manage）的范围是多大呢？实际上它用的是一个<b>向下继承且可被覆盖的机制</b>。首先，它可以配置在同一个pom中 build.plugins 标签下引入的插件；其次，在上面提到过，maven自带一些默认的配置，pluginManagement标签可以配置super pom中的这些默认插件，这就是子pom覆盖了父级（super）pom；最后，一个pom中pluginManagement规定的配置，除非被它的子pom覆盖了，否则在子pom中同样有效，这就是向下继承。</p>

<p>网上的一些资料，有的只强调了pluginManagement有<a href="https://stackoverflow.com/a/37834245/7708392">覆盖super pom的作用</a>，有的只强调了它<a href="https://stackoverflow.com/questions/10483180/what-is-pluginmanagement-in-mavens-pom-xml">能被子pom向下继承</a>。实际上它是同时具有这两种作用，只是向前覆盖的功能写在build.plugins标签里面效果也是一样的，所以比较少被提及。</p>

<p>与之类似，maven的另一组标签dependencyManagement和dependencies在功能上也是同样的区别。</p>

<hr/>
<p class="footer">This blog is written in  EPUB.
The original file is available for <a href="https://github.com/XDcsy/XDcsy.github.io/raw/main/blog.epub">download</a>.</p>
<p class="footer">Feel free to comment by <a href="https://github.com/XDcsy/XDcsy.github.io/issues/new">raising an issue <img alt="GitHub-Mark-32px" src="../Images/GitHub-Mark-32px.png" class="github"/></a>.</p>
</body>
</html>